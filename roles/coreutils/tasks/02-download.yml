---
# tasks file for coreutils by binary

# 检查远程主机上的文件是否存在
# 检查远程主机上的文件是否完整
- name: "Check file exists first: {{ install_tmpdir }}/{{ coreutils_package_name }}"
  stat:
      path: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
  register: check_file_exists_first

- name: "Check file valid first: {{ install_tmpdir }}/{{ coreutils_package_name }}"
  command: "gzip -t {{ install_tmpdir }}/{{ coreutils_package_name }}"
  register: check_file_valid_first
  ignore_errors: true
  when: check_file_exists_first.stat.exists

############################################
# 从控制机拷贝
############################################
- name: "Check file exists on ansible host: {{ role_path }}/files/{{ coreutils_package_name }}"
  delegate_to: localhost
  run_once: true
  stat:
      path: "{{ role_path }}/files/{{ coreutils_package_name }}"
  register: local_file_stat

- name: "Copy file from control machine if remote file is missing or invalid"
  become: true
  copy:
      src: "{{ coreutils_package_name }}"
      dest: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
      owner: "{{ coreutils_install_user }}"
      group: "{{ coreutils_install_group }}"
      mode: "0755"
  when:
      - (not check_file_exists_first.stat.exists or check_file_valid_first.rc != 0)
      - local_file_stat.stat.exists

#################################################
# 从 coreutils_base_url 下载
#################################################

- name: "Check file exists second: {{ install_tmpdir }}/{{ coreutils_package_name }}"
  stat:
      path: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
  register: check_file_exists_second

- name: "Check file valid second: {{ install_tmpdir }}/{{ coreutils_package_name }}"
  command: "gzip -t {{ install_tmpdir }}/{{ coreutils_package_name }}"
  register: check_file_valid_second
  ignore_errors: true
  when: check_file_exists_second.stat.exists

- name: "Download file from coreutils_base_url: from {{ coreutils_base_url }}/{{ coreutils_package_name }} to {{ install_tmpdir }}/{{ coreutils_package_name }}"
  get_url:
      url: "{{ coreutils_base_url }}/{{ coreutils_package_name }}"
      dest: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
      owner: "{{ coreutils_install_user }}"
      group: "{{ coreutils_install_group }}"
      mode: "0755"
      timeout: 600
  when:
      - (not check_file_exists_second.stat.exists or check_file_valid_second.rc != 0)
  ignore_errors: true

#################################################
# 尝试从 coreutils_base_url_remote 下载
#################################################

- name: "Check file exists third: {{ install_tmpdir }}/{{ coreutils_package_name }}"
  stat:
      path: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
  register: check_file_exists_third

- name: "Check file valid third: {{ install_tmpdir }}/{{ coreutils_package_name }}"
  command: "gzip -t {{ install_tmpdir }}/{{ coreutils_package_name }}"
  register: check_file_valid_third
  ignore_errors: true
  when: check_file_exists_third.stat.exists

- name: "Download file from coreutils_base_url_remote: from {{ coreutils_base_url_remote }}/{{ coreutils_package_name }} to {{ install_tmpdir }}/{{ coreutils_package_name }}"
  get_url:
      url: "{{ coreutils_base_url_remote }}/{{ coreutils_package_name }}"
      dest: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
      owner: "{{ coreutils_install_user }}"
      group: "{{ coreutils_install_group }}"
      mode: "0755"
      timeout: 600
  when:
      - (not check_file_exists_third.stat.exists or check_file_valid_third.rc != 0)

#################################################
# 解压
#################################################
- name: "cd {{ install_tmpdir }}/;rpm -ivh {{ coreutils_package_name }}"
  become: true
  shell:
      chdir: "{{ install_tmpdir }}/"
      cmd: "rpm -ivh {{ coreutils_package_name }}"
      remote_src: true
  when:
      - coreutils_deploy_method == "rpm"

- name: "Extract {{ install_tmpdir }}/{{ coreutils_package_name }} to {{ coreutils_app_dir }}/"
  become: true
  unarchive:
      src: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
      dest: "{{ coreutils_app_dir }}/"
      remote_src: true
      owner: "{{ coreutils_install_user }}"
      group: "{{ coreutils_install_group }}"
      extra_opts:
          - --strip-components=1
  when:
      - coreutils_deploy_method == "binary"

- name: "Extract {{ install_tmpdir }}/{{ coreutils_package_name }} to {{ coreutils_source_dir }}/"
  become: true
  unarchive:
      src: "{{ install_tmpdir }}/{{ coreutils_package_name }}"
      dest: "{{ coreutils_source_dir }}/"
      remote_src: true
      owner: "{{ coreutils_install_user }}"
      group: "{{ coreutils_install_group }}"
      extra_opts:
          - --strip-components=1
  when:
      - coreutils_deploy_method == "source"
