---
# tasks file for mysql by binary

# 检查远程主机上的文件是否存在
# 检查远程主机上的文件是否完整
- name: "Check file exists first: {{ install_tmpdir }}/{{ mysql_package_name }}"
  stat:
      path: "{{ install_tmpdir }}/{{ mysql_package_name }}"
  register: check_file_exists_first

- name: "Check file valid first: {{ install_tmpdir }}/{{ mysql_package_name }}"
  command: "gzip -t {{ install_tmpdir }}/{{ mysql_package_name }}"
  register: check_file_valid_first
  ignore_errors: true
  when: check_file_exists_first.stat.exists

############################################
# 从控制机拷贝
############################################
- name: "Check file exists on ansible host: {{ role_path }}/files/{{ mysql_package_name }}"
  delegate_to: localhost
  run_once: true
  stat:
      path: "{{ role_path }}/files/{{ mysql_package_name }}"
  register: local_file_stat

- name: "Copy file from control machine if remote file is missing or invalid"
  copy:
      src: "{{ mysql_package_name }}"
      dest: "{{ install_tmpdir }}/{{ mysql_package_name }}"
      owner: "{{ mysql_install_user }}"
      group: "{{ mysql_install_group }}"
      mode: "0755"
  when:
      - (not check_file_exists_first.stat.exists or check_file_valid_first.rc != 0)
      - local_file_stat.stat.exists

#################################################
# 从 mysql_base_url 下载
#################################################

- name: "Check file exists second: {{ install_tmpdir }}/{{ mysql_package_name }}"
  stat:
      path: "{{ install_tmpdir }}/{{ mysql_package_name }}"
  register: check_file_exists_second

- name: "Check file valid second: {{ install_tmpdir }}/{{ mysql_package_name }}"
  command: "gzip -t {{ install_tmpdir }}/{{ mysql_package_name }}"
  register: check_file_valid_second
  ignore_errors: true
  when: check_file_exists_second.stat.exists

- name: "Download file from mysql_base_url: from {{ mysql_base_url }}/{{ mysql_package_name }} to {{ install_tmpdir }}/{{ mysql_package_name }}"
  get_url:
      url: "{{ mysql_base_url }}/{{ mysql_package_name }}"
      dest: "{{ install_tmpdir }}/{{ mysql_package_name }}"
      owner: "{{ mysql_install_user }}"
      group: "{{ mysql_install_group }}"
      mode: "0755"
      timeout: 600
  when:
      - (not check_file_exists_second.stat.exists or check_file_valid_second.rc != 0)
  ignore_errors: true

#################################################
# 尝试从 mysql_base_url_remote 下载
#################################################

- name: "Check file exists third: {{ install_tmpdir }}/{{ mysql_package_name }}"
  stat:
      path: "{{ install_tmpdir }}/{{ mysql_package_name }}"
  register: check_file_exists_third

- name: "Check file valid third: {{ install_tmpdir }}/{{ mysql_package_name }}"
  command: "gzip -t {{ install_tmpdir }}/{{ mysql_package_name }}"
  register: check_file_valid_third
  ignore_errors: true
  when: check_file_exists_third.stat.exists

- name: "Download file from mysql_base_url_remote: from {{ mysql_base_url_remote }}/{{ mysql_package_name }} to {{ install_tmpdir }}/{{ mysql_package_name }}"
  get_url:
      url: "{{ mysql_base_url_remote }}/{{ mysql_package_name }}"
      dest: "{{ install_tmpdir }}/{{ mysql_package_name }}"
      owner: "{{ mysql_install_user }}"
      group: "{{ mysql_install_group }}"
      mode: "0755"
      timeout: 600
  when:
      - (not check_file_exists_third.stat.exists or check_file_valid_third.rc != 0)

#################################################
# 解压
#################################################

# yum
- name: "yum -y install {{ binutils }} {{ binutils }}-devel"
  become: true
  yum:
    name: "{{ item }}"
    state: present
  with_items:
      - "{{ binutils }}"
      - "{{ binutils }}-devel"
  when:
      - binutils_deploy_method == "yum"


# rpm
- name: "cd {{ install_tmpdir }}/;rpm -ivh {{ mysql_package_name }}"
  become: true
  shell:
      chdir: "{{ install_tmpdir }}/"
      cmd: "rpm -ivh {{ mysql_package_name }}"
      remote_src: true
  when:
      - mysql_deploy_method == "rpm"

# binary
- name: "Extract {{ install_tmpdir }}/{{ mysql_package_name }} to {{ mysql_app_dir }}/"
  unarchive:
      src: "{{ install_tmpdir }}/{{ mysql_package_name }}"
      dest: "{{ mysql_app_dir }}/"
      remote_src: true
      owner: "{{ mysql_install_user }}"
      group: "{{ mysql_install_group }}"
      extra_opts:
          - --strip-components=1
  when:
      - mysql_deploy_method == "binary"

# source
- name: "Extract {{ install_tmpdir }}/{{ mysql_package_name }} to {{ mysql_source_dir }}/"
  become: true
  unarchive:
      src: "{{ install_tmpdir }}/{{ mysql_package_name }}"
      dest: "{{ mysql_source_dir }}/"
      remote_src: true
      owner: "{{ mysql_install_user }}"
      group: "{{ mysql_install_group }}"
      extra_opts:
          - --strip-components=1
  when:
      - mysql_deploy_method == "source"
